class ST{
	vector<int> st,lazy;
public:
	ST(int n){
		st.resize(4*n);
		lazy.resize(4*n);
	}

	void build(int ind,int low,int high,int a[]){
		if(low==high){
			st[ind]=a[low];
			return;
		}
		int mid=(low+high)/2;
		build(2*ind+1,low,mid,a);
		build(2*ind+2,mid+1,high,a);
		st[ind]=st[2*ind+1]+st[2*ind+2];
	}

	void update(int ind,int low,int high,int l,int r,int val){
		// update the previous remaining updates and propagate downwards
		if(lazy[ind]!=0){
			st[ind]+=(high-low+1)*lazy[ind];
			//propagate the lazy update downwards for remaining nodes
			if(low!=high){
				lazy[2*ind+1]+=lazy[ind];
				lazy[2*ind+2]+=lazy[ind];
			}
			lazy[ind]=0;
		}

		//no overlap
		if(r<low or high<l){
			return;
		}

		//complete overlap
		if(low>=l and high<=r){
			st[ind]+=(high-low+1)*val;
			if(low!=high){
				lazy[2*ind+1]+=val;
				lazy[2*ind+2]+=val;
			}
			return;
		}

		int mid=(low+high)/2;
		update(2*ind+1,low,mid,l,r,val);
		update(2*ind+2,mid+1,high,l,r,val);
		st[ind]=st[2*ind+1]+st[2*ind+2];
	}

	int query(int ind,int low,int high,int l,int r){
		// update if any updates are remaining
		if(lazy[ind]!=0){
			st[ind]+=(high-low+1)*lazy[ind];
			//propagate the lazy update downwards for remaining nodes
			if(low!=high){
				lazy[2*ind+1]+=lazy[ind];
				lazy[2*ind+2]+=lazy[ind];
			}
			lazy[ind]=0;
		}

		//no overlap
		if(r<low or high<l){
			return 0;
		}
		//complete overlap
		if(low>=l and high<=r){
			return st[ind];
		}
		int mid=(low+high)/2;
		int left=query(2*ind+1,low,mid,l,r);
		int right=query(2*ind+2,mid+1,high,l,r);
		return left+right;
	}
};
